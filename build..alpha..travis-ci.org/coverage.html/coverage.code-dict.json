{"/home/travis/build/npmtest/node-npmtest-whacko/test.js":"/* istanbul instrument in package npmtest_whacko */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-whacko/lib.npmtest_whacko.js":"/* istanbul instrument in package npmtest_whacko */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_whacko = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_whacko = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-whacko/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-whacko && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_whacko */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_whacko\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_whacko.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_whacko.rollup.js'] =\n            local.assetsDict['/assets.npmtest_whacko.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_whacko.__dirname + '/lib.npmtest_whacko.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-whacko/node_modules/whacko/index.js":"/**\r\n * Export cheerio (with )\r\n */\r\n\r\nexports = module.exports = require('./lib/cheerio');\r\n\r\n/*\r\n  Export the version\r\n*/\r\n\r\nexports.version = require('./package').version;\r\n","/home/travis/build/npmtest/node-npmtest-whacko/node_modules/whacko/lib/cheerio.js":"/*\r\n  Module dependencies\r\n*/\r\n\r\nvar parse = require('./parse'),\r\n    _ = require('lodash');\r\n\r\n/*\r\n * The API\r\n */\r\n\r\nvar api = [\r\n  require('./api/attributes'),\r\n  require('./api/traversing'),\r\n  require('./api/manipulation'),\r\n  require('./api/css')\r\n];\r\n\r\n/*\r\n * A simple way to check for HTML strings or ID strings\r\n */\r\n\r\nvar quickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\r\n\r\n/*\r\n * Instance of cheerio\r\n */\r\n\r\nvar Cheerio = module.exports = function(selector, context, root, options) {\r\n  if (!(this instanceof Cheerio)) return new Cheerio(selector, context, root, options);\r\n\r\n  this.options = _.defaults(options || {}, this.options);\r\n\r\n  // $(), $(null), $(undefined), $(false)\r\n  if (!selector) return this;\r\n\r\n  if (root) {\r\n    if (typeof root === 'string') root = parse(root, this.options);\r\n    this._root = Cheerio.call(this, root);\r\n  }\r\n\r\n  // $($)\r\n  if (selector.cheerio) return selector;\r\n\r\n  // $(dom)\r\n  if (isNode(selector))\r\n    selector = [selector];\r\n\r\n  // $([dom])\r\n  if (Array.isArray(selector)) {\r\n    _.forEach(selector, function(elem, idx) {\r\n      this[idx] = elem;\r\n    }, this);\r\n    this.length = selector.length;\r\n    return this;\r\n  }\r\n\r\n  // $(<html>)\r\n  if (typeof selector === 'string' && isHtml(selector)) {\r\n    return Cheerio.call(this, parse(selector, this.options).children);\r\n  }\r\n\r\n  // If we don't have a context, maybe we have a root, from loading\r\n  if (!context) {\r\n    context = this._root;\r\n  } else if (typeof context === 'string') {\r\n    if (isHtml(context)) {\r\n      // $('li', '<ul>...</ul>')\r\n      context = parse(context, this.options);\r\n      context = Cheerio.call(this, context);\r\n    } else {\r\n      // $('li', 'ul')\r\n      selector = [context, selector].join(' ');\r\n      context = this._root;\r\n    }\r\n  // $('li', node), $('li', [nodes])\r\n  } else if (!context.cheerio) {\r\n    context = Cheerio.call(this, context);\r\n  }\r\n\r\n  // If we still don't have a context, return\r\n  if (!context) return this;\r\n\r\n  // #id, .class, tag\r\n  return context.find(selector);\r\n};\r\n\r\n/**\r\n * Mix in `static`\r\n */\r\n\r\n_.extend(Cheerio, require('./static'));\r\n\r\n/*\r\n * Set a signature of the object\r\n */\r\n\r\nCheerio.prototype.cheerio = '[cheerio object]';\r\n\r\n/*\r\n * Cheerio default options\r\n */\r\n\r\nCheerio.prototype.options = {\r\n  withDomLvl1: true,\r\n  normalizeWhitespace: false,\r\n  xmlMode: false,\r\n  encodeEntities: true\r\n};\r\n\r\n/*\r\n * Make cheerio an array-like object\r\n */\r\n\r\nCheerio.prototype.length = 0;\r\nCheerio.prototype.splice = Array.prototype.splice;\r\n\r\n/*\r\n * Check if string is HTML\r\n */\r\nvar isHtml = function(str) {\r\n  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML\r\n  if (str.charAt(0) === '<' && str.charAt(str.length - 1) === '>' && str.length >= 3) return true;\r\n\r\n  // Run the regex\r\n  var match = quickExpr.exec(str);\r\n  return !!(match && match[1]);\r\n};\r\n\r\n/*\r\n * Make a cheerio object\r\n *\r\n * @api private\r\n */\r\n\r\nCheerio.prototype._make = function(dom, context) {\r\n  var cheerio = new Cheerio(dom, context, this._root, this.options);\r\n  cheerio.prevObject = this;\r\n  return cheerio;\r\n};\r\n\r\n/**\r\n * Turn a cheerio object into an array\r\n *\r\n * @deprecated\r\n */\r\n\r\nCheerio.prototype.toArray = function() {\r\n  return this.get();\r\n};\r\n\r\n/**\r\n * Plug in the API\r\n */\r\napi.forEach(function(mod) {\r\n  _.extend(Cheerio.prototype, mod);\r\n});\r\n\r\nvar isNode = function(obj) {\r\n  return obj.name || obj.type === 'text' || obj.type === 'comment';\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-whacko/node_modules/whacko/lib/parse.js":"/*\r\n Module Dependencies\r\n */\r\nvar parse5 = require('parse5');\r\n\r\n\r\n/*\r\n Parser\r\n */\r\nexports = module.exports = function (content, options, isDocument) {\r\n    var dom = exports.evaluate(content, options, isDocument);\r\n\r\n    // Generic root element\r\n    var root = parse5.TreeAdapters.htmlparser2.createDocument();\r\n\r\n    // Update the dom using the root\r\n    exports.update(dom, root);\r\n\r\n    return root;\r\n};\r\n\r\nvar shouldParseAsDocument = function (content) {\r\n    //NOTE: if evaluate was called in fragment parsing mode, but doctype or <html> tag was passed\r\n    //we should switch to document parsing mode. This is a pretty simple heuristic, e.g. we don't expect\r\n    //comments at the beginning of the content.\r\n    return /^\\s*<!doctype/i.test(content) || /^\\s*<html/i.test(content);\r\n};\r\n\r\nexports.evaluate = function (content, options, isDocument) {\r\n    var parser = new parse5.Parser(parse5.TreeAdapters.htmlparser2, {\r\n        decodeHtmlEntities: options.decodeHtmlEntities !== false\r\n    });\r\n    var dom = null;\r\n\r\n    if (Buffer.isBuffer(content))\r\n        content = content.toString();\r\n\r\n    if (typeof content === 'string') {\r\n\r\n        if (isDocument || shouldParseAsDocument(content))\r\n            dom = parser.parse(content);\r\n        else\r\n            dom = parser.parseFragment(content);\r\n\r\n        dom = dom.children;\r\n\r\n        return dom;\r\n    }\r\n\r\n    return content;\r\n};\r\n\r\n/*\r\n Update the dom structure, for one changed layer\r\n */\r\nexports.update = function (arr, parent) {\r\n    // normalize\r\n    if (!Array.isArray(arr)) arr = [arr];\r\n\r\n    // Update parent\r\n    if (parent) {\r\n        parent.children = arr;\r\n    } else {\r\n        parent = null;\r\n    }\r\n\r\n    // Update neighbors\r\n    for (var i = 0; i < arr.length; i++) {\r\n        var node = arr[i];\r\n\r\n        // Cleanly remove existing nodes from their previous structures.\r\n        var oldParent = node.parent || node.root,\r\n            oldSiblings = oldParent && oldParent.children;\r\n        if (oldSiblings && oldSiblings !== arr) {\r\n            oldSiblings.splice(oldSiblings.indexOf(node), 1);\r\n            if (node.prev) {\r\n                node.prev.next = node.next;\r\n            }\r\n            if (node.next) {\r\n                node.next.prev = node.prev;\r\n            }\r\n        }\r\n\r\n        if (parent) {\r\n            node.prev = arr[i - 1] || null;\r\n            node.next = arr[i + 1] || null;\r\n        } else {\r\n            node.prev = node.next = null;\r\n        }\r\n\r\n        if (parent && parent.type === 'root') {\r\n            node.root = parent;\r\n            node.parent = null;\r\n        } else {\r\n            node.root = null;\r\n            node.parent = parent;\r\n        }\r\n    }\r\n\r\n    return parent;\r\n};\r\n\r\n// module.exports = $.extend(exports);\r\n","/home/travis/build/npmtest/node-npmtest-whacko/node_modules/whacko/lib/api/attributes.js":"var _ = require('lodash'),\r\n  utils = require('../utils'),\r\n  isTag = utils.isTag,\r\n  domEach = utils.domEach,\r\n  hasOwn = Object.prototype.hasOwnProperty,\r\n  camelCase = utils.camelCase,\r\n  cssCase = utils.cssCase,\r\n  rspace = /\\s+/,\r\n  dataAttrPrefix = 'data-',\r\n\r\n  // Lookup table for coercing string data-* attributes to their corresponding\r\n  // JavaScript primitives\r\n  primitives = {\r\n    null: null,\r\n    true: true,\r\n    false: false\r\n  },\r\n\r\n  // Attributes that are booleans\r\n  rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,\r\n  // Matches strings that look like JSON objects or arrays\r\n  rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/;\r\n\r\n\r\nvar getAttr = function(elem, name) {\r\n  if (!elem || !isTag(elem)) return;\r\n\r\n  if (!elem.attribs) {\r\n    elem.attribs = {};\r\n  }\r\n\r\n  // Return the entire attribs object if no attribute specified\r\n  if (!name) {\r\n    return elem.attribs;\r\n  }\r\n\r\n  if (hasOwn.call(elem.attribs, name)) {\r\n    // Get the (decoded) attribute\r\n    return rboolean.test(name) ? name : elem.attribs[name];\r\n  }\r\n};\r\n\r\nvar setAttr = function(el, name, value) {\r\n\r\n  if (value === null) {\r\n    removeAttribute(el, name);\r\n  } else {\r\n    el.attribs[name] = value+'';\r\n  }\r\n};\r\n\r\nexports.attr = function(name, value) {\r\n  // Set the value (with attr map support)\r\n  if (typeof name === 'object' || value !== undefined) {\r\n    if (typeof value === 'function') {\r\n      return domEach(this, function(i, el) {\r\n        setAttr(el, name, value.call(el, i, el.attribs[name]));\r\n      });\r\n    }\r\n    return domEach(this, function(i, el) {\r\n      if (!isTag(el)) return;\r\n\r\n      if (typeof name === 'object') {\r\n        _.each(name, function(name, key) {\r\n          el.attribs[key] = name+'';\r\n        });\r\n      } else {\r\n        setAttr(el, name, value);\r\n      }\r\n    });\r\n  }\r\n\r\n  return getAttr(this[0], name);\r\n};\r\n\r\nvar setData = function(el, name, value) {\r\n  if (typeof name === 'object') return _.extend(el.data, name);\r\n  if (typeof name === 'string' && value !== undefined) {\r\n    el.data[name] = value;\r\n  } else if (typeof name === 'object') {\r\n    _.exend(el.data, name);\r\n  }\r\n};\r\n\r\n// Read the specified attribute from the equivalent HTML5 `data-*` attribute,\r\n// and (if present) cache the value in the node's internal data store. If no\r\n// attribute name is specified, read *all* HTML5 `data-*` attributes in this\r\n// manner.\r\nvar readData = function(el, name) {\r\n  var readAll = arguments.length === 1;\r\n  var domNames, domName, jsNames, jsName, value, idx, length;\r\n\r\n  if (readAll) {\r\n    domNames = Object.keys(el.attribs).filter(function(attrName) {\r\n      return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix;\r\n    });\r\n    jsNames = domNames.map(function(domName) {\r\n      return camelCase(domName.slice(dataAttrPrefix.length));\r\n    });\r\n  } else {\r\n    domNames = [dataAttrPrefix + cssCase(name)];\r\n    jsNames = [name];\r\n  }\r\n\r\n  for (idx = 0, length = domNames.length; idx < length; ++idx) {\r\n    domName = domNames[idx];\r\n    jsName = jsNames[idx];\r\n    if (hasOwn.call(el.attribs, domName)) {\r\n      value = el.attribs[domName];\r\n\r\n      if (hasOwn.call(primitives, value)) {\r\n        value = primitives[value];\r\n      } else if (value === String(Number(value))) {\r\n        value = Number(value);\r\n      } else if (rbrace.test(value)) {\r\n        value = JSON.parse(value);\r\n      }\r\n\r\n      el.data[jsName] = value;\r\n    }\r\n  }\r\n\r\n  return readAll ? el.data : value;\r\n};\r\n\r\nexports.data = function(name, value) {\r\n  var elem = this[0];\r\n\r\n  if (!elem || !isTag(elem)) return;\r\n\r\n  if (!elem.data) {\r\n    elem.data = {};\r\n  }\r\n\r\n  // Return the entire data object if no data specified\r\n  if (!name) {\r\n    return readData(elem);\r\n  }\r\n\r\n  // Set the value (with attr map support)\r\n  if (typeof name === 'object' || value !== undefined) {\r\n    domEach(this, function(i, el) {\r\n      setData(el, name, value);\r\n    });\r\n    return this;\r\n  } else if (hasOwn.call(elem.data, name)) {\r\n    return elem.data[name];\r\n  }\r\n\r\n  return readData(elem, name);\r\n};\r\n\r\n/**\r\n * Get the value of an element\r\n */\r\n\r\nexports.val = function(value) {\r\n  var querying = arguments.length === 0,\r\n      element = this[0];\r\n\r\n  if(!element) return;\r\n\r\n  switch (element.name) {\r\n    case 'textarea':\r\n      return this.text(value);\r\n    case 'input':\r\n      switch (this.attr('type')) {\r\n        case 'radio':\r\n          var queryString = 'input[type=radio][name=\"' + this.attr('name') + '\"]:checked';\r\n          var parentEl, root;\r\n\r\n          // Go up until we hit a form or root\r\n          parentEl = this.closest('form');\r\n          if (parentEl.length === 0) {\r\n            root = (this.parents().last()[0] || this[0]).root;\r\n            parentEl = this._make(root);\r\n          }\r\n\r\n          if (querying) {\r\n            return parentEl.find(queryString).attr('value');\r\n          } else {\r\n            parentEl.find(':checked').removeAttr('checked');\r\n            parentEl.find('input[type=radio][value=\"' + value + '\"]').attr('checked', '');\r\n            return this;\r\n          }\r\n          break;\r\n        default:\r\n          return this.attr('value', value);\r\n      }\r\n      return;\r\n    case 'select':\r\n      var option = this.find('option:selected'),\r\n          returnValue;\r\n      if (option === undefined) return undefined;\r\n      if (!querying) {\r\n        if (!this.attr().hasOwnProperty('multiple') && typeof value == 'object') {\r\n          return this;\r\n        }\r\n        if (typeof value != 'object') {\r\n          value = [value];\r\n        }\r\n        this.find('option').removeAttr('selected');\r\n        for (var i = 0; i < value.length; i++) {\r\n          this.find('option[value=\"' + value[i] + '\"]').attr('selected', '');\r\n        }\r\n        return this;\r\n      }\r\n      returnValue = option.attr('value');\r\n      if (this.attr().hasOwnProperty('multiple')) {\r\n        returnValue = [];\r\n        domEach(option, function(i, el) {\r\n          returnValue.push(el.attribs.value);\r\n        });\r\n      }\r\n      return returnValue;\r\n    case 'option':\r\n      if (!querying) {\r\n        this.attr('value', value);\r\n        return this;\r\n      }\r\n      return this.attr('value');\r\n  }\r\n};\r\n\r\n/**\r\n * Remove an attribute\r\n */\r\n\r\nvar removeAttribute = function(elem, name) {\r\n  if (!elem.attribs || !hasOwn.call(elem.attribs, name))\r\n    return;\r\n\r\n  delete elem.attribs[name];\r\n};\r\n\r\n\r\nexports.removeAttr = function(name) {\r\n  domEach(this, function(i, elem) {\r\n    removeAttribute(elem, name);\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\nexports.hasClass = function(className) {\r\n  return _.any(this, function(elem) {\r\n    var attrs = elem.attribs,\r\n        clazz = attrs && attrs['class'],\r\n        idx = -1,\r\n        end;\r\n\r\n    if (clazz) {\r\n      while ((idx = clazz.indexOf(className, idx+1)) > -1) {\r\n        end = idx + className.length;\r\n\r\n        if ((idx === 0 || rspace.test(clazz[idx-1]))\r\n            && (end === clazz.length || rspace.test(clazz[end]))) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexports.addClass = function(value) {\r\n  // Support functions\r\n  if (typeof value === 'function') {\r\n    return domEach(this, function(i, el) {\r\n      var className = el.attribs['class'] || '';\r\n      exports.addClass.call([el], value.call(el, i, className));\r\n    });\r\n  }\r\n\r\n  // Return if no value or not a string or function\r\n  if (!value || typeof value !== 'string') return this;\r\n\r\n  var classNames = value.split(rspace),\r\n      numElements = this.length;\r\n\r\n\r\n  for (var i = 0; i < numElements; i++) {\r\n    // If selected element isn't a tag, move on\r\n    if (!isTag(this[i])) continue;\r\n\r\n    // If we don't already have classes\r\n    var className = getAttr(this[i], 'class'),\r\n        numClasses,\r\n        setClass;\r\n\r\n    if (!className) {\r\n      setAttr(this[i], 'class', classNames.join(' ').trim());\r\n    } else {\r\n      setClass = ' ' + className + ' ';\r\n      numClasses = classNames.length;\r\n\r\n      // Check if class already exists\r\n      for (var j = 0; j < numClasses; j++) {\r\n        var appendClass = classNames[j] + ' ';\r\n        if (!~setClass.indexOf(' ' + appendClass))\r\n          setClass += appendClass;\r\n      }\r\n\r\n      setAttr(this[i], 'class', setClass.trim());\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nvar splitClass = function(className) {\r\n  return className ? className.trim().split(rspace) : [];\r\n};\r\n\r\nexports.removeClass = function(value) {\r\n  var classes,\r\n      numClasses,\r\n      removeAll;\r\n\r\n  // Handle if value is a function\r\n  if (typeof value === 'function') {\r\n    return domEach(this, function(i, el) {\r\n      exports.removeClass.call(\r\n        [el], value.call(el, i, el.attribs['class'] || '')\r\n      );\r\n    });\r\n  }\r\n\r\n  classes = splitClass(value);\r\n  numClasses = classes.length;\r\n  removeAll = arguments.length === 0;\r\n\r\n  return domEach(this, function(i, el) {\r\n    if (!isTag(el)) return;\r\n\r\n    if (removeAll) {\r\n      // Short circuit the remove all case as this is the nice one\r\n      el.attribs.class = '';\r\n    } else {\r\n      var elClasses = splitClass(el.attribs.class),\r\n          index,\r\n          changed;\r\n\r\n      for (var j = 0; j < numClasses; j++) {\r\n        index = elClasses.indexOf(classes[j]);\r\n\r\n        if (index >= 0) {\r\n          elClasses.splice(index, 1);\r\n          changed = true;\r\n\r\n          // We have to do another pass to ensure that there are not duplicate\r\n          // classes listed\r\n          j--;\r\n        }\r\n      }\r\n      if (changed) {\r\n        el.attribs.class = elClasses.join(' ');\r\n      }\r\n    }\r\n  });\r\n};\r\n\r\nexports.toggleClass = function(value, stateVal) {\r\n  // Support functions\r\n  if (typeof value === 'function') {\r\n    return domEach(this, function(i, el) {\r\n      exports.toggleClass.call(\r\n        [el],\r\n        value.call(el, i, el.attribs['class'] || '', stateVal),\r\n        stateVal\r\n      );\r\n    });\r\n  }\r\n\r\n  // Return if no value or not a string or function\r\n  if (!value || typeof value !== 'string') return this;\r\n\r\n  var classNames = value.split(rspace),\r\n    numClasses = classNames.length,\r\n    state = typeof stateVal === 'boolean' ? stateVal ? 1 : -1 : 0,\r\n    numElements = this.length,\r\n    elementClasses,\r\n    index;\r\n\r\n  for (var i = 0; i < numElements; i++) {\r\n    // If selected element isn't a tag, move on\r\n    if (!isTag(this[i])) continue;\r\n\r\n    elementClasses = splitClass(this[i].attribs.class);\r\n\r\n    // Check if class already exists\r\n    for (var j = 0; j < numClasses; j++) {\r\n      // Check if the class name is currently defined\r\n      index = elementClasses.indexOf(classNames[j]);\r\n\r\n      // Add if stateValue === true or we are toggling and there is no value\r\n      if (state >= 0 && index < 0) {\r\n        elementClasses.push(classNames[j]);\r\n      } else if (state <= 0 && index >= 0) {\r\n        // Otherwise remove but only if the item exists\r\n        elementClasses.splice(index, 1);\r\n      }\r\n    }\r\n\r\n    this[i].attribs.class = elementClasses.join(' ');\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nexports.is = function (selector) {\r\n  if (selector) {\r\n    return this.filter(selector).length > 0;\r\n  }\r\n  return false;\r\n};\r\n\r\n","/home/travis/build/npmtest/node-npmtest-whacko/node_modules/whacko/lib/utils.js":"/**\r\n * HTML Tags\r\n */\r\n\r\nvar tags = { tag: true, script: true, style: true };\r\n\r\n/**\r\n * Check if the DOM element is a tag\r\n *\r\n * isTag(type) includes <script> and <style> tags\r\n */\r\n\r\nexports.isTag = function(type) {\r\n  if (type.type) type = type.type;\r\n  return tags[type] || false;\r\n};\r\n\r\n/**\r\n * Convert a string to camel case notation.\r\n * @param  {String} str String to be converted.\r\n * @return {String}     String in camel case notation.\r\n */\r\n\r\nexports.camelCase = function(str) {\r\n  return str.replace(/[_.-](\\w|$)/g, function(_, x) {\r\n    return x.toUpperCase();\r\n  });\r\n};\r\n\r\n/**\r\n * Convert a string from camel case to \"CSS case\", where word boundaries are\r\n * described by hyphens (\"-\") and all characters are lower-case.\r\n * @param  {String} str String to be converted.\r\n * @return {string}     String in \"CSS case\".\r\n */\r\nexports.cssCase = function(str) {\r\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\r\n};\r\n\r\n/**\r\n * Iterate over each DOM element without creating intermediary Cheerio instances.\r\n *\r\n * This is indented for use internally to avoid otherwise unnecessary memory pressure introduced\r\n * by _make.\r\n */\r\n\r\nexports.domEach = function(cheerio, fn) {\r\n  var i = 0, len = cheerio.length;\r\n  while (i < len && fn(i, cheerio[i]) !== false) ++i;\r\n  return cheerio;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-whacko/node_modules/whacko/lib/api/traversing.js":"var _ = require('lodash'),\r\n    select = require('css-select'),\r\n    utils = require('../utils'),\r\n    domEach = utils.domEach,\r\n    uniqueSort = require('domutils').uniqueSort,\r\n    isTag = utils.isTag;\r\n\r\nexports.find = function(selectorOrHaystack) {\r\n  var elems = _.reduce(this, function(memo, elem) {\r\n    return memo.concat(_.filter(elem.children, isTag));\r\n  }, []);\r\n  var contains = this.constructor.contains;\r\n  var haystack;\r\n\r\n  if (selectorOrHaystack && typeof selectorOrHaystack !== 'string') {\r\n    if (selectorOrHaystack.cheerio) {\r\n      haystack = selectorOrHaystack.get();\r\n    } else {\r\n      haystack = [selectorOrHaystack];\r\n    }\r\n\r\n    return this._make(haystack.filter(function(elem) {\r\n      var idx, len;\r\n      for (idx = 0, len = this.length; idx < len; ++idx) {\r\n        if (contains(this[idx], elem)) {\r\n          return true;\r\n        }\r\n      }\r\n    }, this));\r\n  }\r\n\r\n  return this._make(select(selectorOrHaystack, elems, this.options));\r\n};\r\n\r\n// Get the parent of each element in the current set of matched elements,\r\n// optionally filtered by a selector.\r\nexports.parent = function(selector) {\r\n  var set = [];\r\n\r\n  domEach(this, function(idx, elem) {\r\n    var parentElem = elem.parent;\r\n    if (parentElem && set.indexOf(parentElem) < 0) {\r\n      set.push(parentElem);\r\n    }\r\n  });\r\n\r\n  if (arguments.length) {\r\n    set = exports.filter.call(set, selector, this);\r\n  }\r\n\r\n  return this._make(set);\r\n};\r\n\r\nexports.parents = function(selector) {\r\n  var parentNodes = [];\r\n\r\n  // When multiple DOM elements are in the original set, the resulting set will\r\n  // be in *reverse* order of the original elements as well, with duplicates\r\n  // removed.\r\n  this.get().reverse().forEach(function(elem) {\r\n    traverseParents(this, elem.parent, selector, Infinity)\r\n      .forEach(function(node) {\r\n        if (parentNodes.indexOf(node) === -1) {\r\n          parentNodes.push(node);\r\n        }\r\n      }\r\n    );\r\n  }, this);\r\n\r\n  return this._make(parentNodes);\r\n};\r\n\r\nexports.parentsUntil = function(selector, filter) {\r\n  var parentNodes = [], untilNode, untilNodes;\r\n\r\n  if (typeof selector === 'string') {\r\n    untilNode = select(selector, this.parents().toArray(), this.options)[0];\r\n  } else if (selector && selector.cheerio) {\r\n    untilNodes = selector.toArray();\r\n  } else if (selector) {\r\n    untilNode = selector;\r\n  }\r\n\r\n  // When multiple DOM elements are in the original set, the resulting set will\r\n  // be in *reverse* order of the original elements as well, with duplicates\r\n  // removed.\r\n\r\n  this.toArray().reverse().forEach(function(elem) {\r\n    while ((elem = elem.parent)) {\r\n      if ((untilNode && elem !== untilNode) ||\r\n        (untilNodes && untilNodes.indexOf(elem) === -1) ||\r\n        (!untilNode && !untilNodes)) {\r\n        if (isTag(elem) && parentNodes.indexOf(elem) === -1) { parentNodes.push(elem); }\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }, this);\r\n\r\n  return this._make(filter ? select(filter, parentNodes, this.options) : parentNodes);\r\n};\r\n\r\n// For each element in the set, get the first element that matches the selector\r\n// by testing the element itself and traversing up through its ancestors in the\r\n// DOM tree.\r\nexports.closest = function(selector) {\r\n  var set = [];\r\n\r\n  if (!selector) {\r\n    return this._make(set);\r\n  }\r\n\r\n  domEach(this, function(idx, elem) {\r\n    var closestElem = traverseParents(this, elem, selector, 1)[0];\r\n\r\n    // Do not add duplicate elements to the set\r\n    if (closestElem && set.indexOf(closestElem) < 0) {\r\n      set.push(closestElem);\r\n    }\r\n  }.bind(this));\r\n\r\n  return this._make(set);\r\n};\r\n\r\nexports.next = function(selector) {\r\n  if (!this[0]) { return this; }\r\n  var elems = [];\r\n\r\n  _.forEach(this, function(elem) {\r\n    while ((elem = elem.next)) {\r\n      if (isTag(elem)) {\r\n        elems.push(elem);\r\n        return;\r\n      }\r\n    }\r\n  });\r\n\r\n  return selector ?\r\n    exports.filter.call(elems, selector, this) :\r\n    this._make(elems);\r\n};\r\n\r\nexports.nextAll = function(selector) {\r\n  if (!this[0]) { return this; }\r\n  var elems = [];\r\n\r\n  _.forEach(this, function(elem) {\r\n    while ((elem = elem.next)) {\r\n      if (isTag(elem) && elems.indexOf(elem) === -1) {\r\n        elems.push(elem);\r\n      }\r\n    }\r\n  });\r\n\r\n  return selector ?\r\n    exports.filter.call(elems, selector, this) :\r\n    this._make(elems);\r\n};\r\n\r\nexports.nextUntil = function(selector, filterSelector) {\r\n  if (!this[0]) { return this; }\r\n  var elems = [], untilNode, untilNodes;\r\n\r\n  if (typeof selector === 'string') {\r\n    untilNode = select(selector, this.nextAll().get(), this.options)[0];\r\n  } else if (selector && selector.cheerio) {\r\n    untilNodes = selector.get();\r\n  } else if (selector) {\r\n    untilNode = selector;\r\n  }\r\n\r\n  _.forEach(this, function(elem) {\r\n    while ((elem = elem.next)) {\r\n      if ((untilNode && elem !== untilNode) ||\r\n        (untilNodes && untilNodes.indexOf(elem) === -1) ||\r\n        (!untilNode && !untilNodes)) {\r\n        if (isTag(elem) && elems.indexOf(elem) === -1) {\r\n          elems.push(elem);\r\n        }\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  return filterSelector ?\r\n    exports.filter.call(elems, filterSelector, this) :\r\n    this._make(elems);\r\n};\r\n\r\nexports.prev = function(selector) {\r\n  if (!this[0]) { return this; }\r\n  var elems = [];\r\n\r\n  _.forEach(this, function(elem) {\r\n    while ((elem = elem.prev)) {\r\n      if (isTag(elem)) {\r\n        elems.push(elem);\r\n        return;\r\n      }\r\n    }\r\n  });\r\n\r\n  return selector ?\r\n    exports.filter.call(elems, selector, this) :\r\n    this._make(elems);\r\n};\r\n\r\nexports.prevAll = function(selector) {\r\n  if (!this[0]) { return this; }\r\n  var elems = [];\r\n\r\n  _.forEach(this, function(elem) {\r\n    while ((elem = elem.prev)) {\r\n      if (isTag(elem) && elems.indexOf(elem) === -1) {\r\n        elems.push(elem);\r\n      }\r\n    }\r\n  });\r\n\r\n  return selector ?\r\n    exports.filter.call(elems, selector, this) :\r\n    this._make(elems);\r\n};\r\n\r\nexports.prevUntil = function(selector, filterSelector) {\r\n  if (!this[0]) { return this; }\r\n  var elems = [], untilNode, untilNodes;\r\n\r\n  if (typeof selector === 'string') {\r\n    untilNode = select(selector, this.prevAll().get(), this.options)[0];\r\n  } else if (selector && selector.cheerio) {\r\n    untilNodes = selector.get();\r\n  } else if (selector) {\r\n    untilNode = selector;\r\n  }\r\n\r\n  _.forEach(this, function(elem) {\r\n    while ((elem = elem.prev)) {\r\n      if ((untilNode && elem !== untilNode) ||\r\n        (untilNodes && untilNodes.indexOf(elem) === -1) ||\r\n        (!untilNode && !untilNodes)) {\r\n        if (isTag(elem) && elems.indexOf(elem) === -1) {\r\n          elems.push(elem);\r\n        }\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  return filterSelector ?\r\n    exports.filter.call(elems, filterSelector, this) :\r\n    this._make(elems);\r\n};\r\n\r\nexports.siblings = function(selector) {\r\n  var parent = this.parent();\r\n\r\n  var elems = _.filter(\r\n    parent ? parent.children() : this.siblingsAndMe(),\r\n    function(elem) { return isTag(elem) && !this.is(elem); },\r\n    this\r\n  );\r\n\r\n  if (selector !== undefined) {\r\n    return exports.filter.call(elems, selector, this);\r\n  } else {\r\n    return this._make(elems);\r\n  }\r\n};\r\n\r\nexports.children = function(selector) {\r\n\r\n  var elems = _.reduce(this, function(memo, elem) {\r\n    return memo.concat(_.filter(elem.children, isTag));\r\n  }, []);\r\n\r\n  if (selector === undefined) return this._make(elems);\r\n  else if (typeof selector === 'number') return this._make(elems[selector]);\r\n\r\n  return exports.filter.call(elems, selector, this);\r\n};\r\n\r\nexports.contents = function() {\r\n  return this._make(_.reduce(this, function(all, elem) {\r\n    all.push.apply(all, elem.children);\r\n    return all;\r\n  }, []));\r\n};\r\n\r\nexports.each = function(fn) {\r\n  var i = 0, len = this.length;\r\n  while (i < len && fn.call(this[i], i, this[i]) !== false) ++i;\r\n  return this;\r\n};\r\n\r\nexports.map = function(fn) {\r\n  return this._make(_.reduce(this, function(memo, el, i) {\r\n    var val = fn.call(el, i, el);\r\n    return val == null ? memo : memo.concat(val);\r\n  }, []));\r\n};\r\n\r\nvar makeFilterMethod = function(filterFn) {\r\n  return function(match, container) {\r\n    var testFn;\r\n    container = container || this;\r\n\r\n    if (typeof match === 'string') {\r\n      testFn = select.compile(match, container.options);\r\n    } else if (typeof match === 'function') {\r\n      testFn = function(el, i) {\r\n        return match.call(el, i, el);\r\n      };\r\n    } else if (match.cheerio) {\r\n      testFn = match.is.bind(match);\r\n    } else {\r\n      testFn = function(el) {\r\n        return match === el;\r\n      };\r\n    }\r\n\r\n    return container._make(filterFn(this, testFn));\r\n  };\r\n};\r\n\r\nexports.filter = makeFilterMethod(_.filter);\r\nexports.not = makeFilterMethod(_.reject);\r\n\r\nexports.first = function() {\r\n  return this.length > 1 ? this._make(this[0]) : this;\r\n};\r\n\r\nexports.last = function() {\r\n  return this.length > 1 ? this._make(this[this.length - 1]) : this;\r\n};\r\n\r\n// Reduce the set of matched elements to the one at the specified index.\r\nexports.eq = function(i) {\r\n  i = +i;\r\n\r\n  // Use the first identity optimization if possible\r\n  if (i === 0 && this.length <= 1) return this;\r\n\r\n  if (i < 0) i = this.length + i;\r\n  return this[i] ? this._make(this[i]) : this._make([]);\r\n};\r\n\r\n// Retrieve the DOM elements matched by the jQuery object.\r\nexports.get = function(i) {\r\n  if (i == null) {\r\n    return Array.prototype.slice.call(this);\r\n  } else {\r\n    return this[i < 0 ? (this.length + i) : i];\r\n  }\r\n};\r\n\r\n// Search for a given element from among the matched elements.\r\nexports.index = function(selectorOrNeedle) {\r\n  var $haystack, needle;\r\n\r\n  if (arguments.length === 0) {\r\n    $haystack = this.parent().children();\r\n    needle = this[0];\r\n  } else if (typeof selectorOrNeedle === 'string') {\r\n    $haystack = this._make(selectorOrNeedle);\r\n    needle = this[0];\r\n  } else {\r\n    $haystack = this;\r\n    needle = selectorOrNeedle.cheerio ? selectorOrNeedle[0] : selectorOrNeedle;\r\n  }\r\n\r\n  return $haystack.get().indexOf(needle);\r\n};\r\n\r\nexports.slice = function() {\r\n  return this._make([].slice.apply(this, arguments));\r\n};\r\n\r\nfunction traverseParents(self, elem, selector, limit) {\r\n  var elems = [];\r\n  while (elem && elems.length < limit) {\r\n    if (!selector || exports.filter.call([elem], selector, self).length) {\r\n      elems.push(elem);\r\n    }\r\n    elem = elem.parent;\r\n  }\r\n  return elems;\r\n}\r\n\r\n// End the most recent filtering operation in the current chain and return the\r\n// set of matched elements to its previous state.\r\nexports.end = function() {\r\n  return this.prevObject || this._make([]);\r\n};\r\n\r\nexports.add = function(other, context) {\r\n  var selection = this._make(other, context);\r\n  var contents = uniqueSort(selection.get().concat(this.get()));\r\n\r\n  for (var i = 0; i < contents.length; ++i) {\r\n    selection[i] = contents[i];\r\n  }\r\n  selection.length = contents.length;\r\n\r\n  return selection;\r\n};\r\n\r\n// Add the previous set of elements on the stack to the current set, optionally\r\n// filtered by a selector.\r\nexports.addBack = function(selector) {\r\n  return this.add(\r\n    arguments.length ? this.prevObject.filter(selector) : this.prevObject\r\n  );\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-whacko/node_modules/whacko/lib/api/manipulation.js":"var _ = require('lodash'),\r\n    parse = require('../parse'),\r\n    $ = require('../static'),\r\n    updateDOM = parse.update,\r\n    evaluate = parse.evaluate,\r\n    utils = require('../utils'),\r\n    domEach = utils.domEach,\r\n    slice = Array.prototype.slice;\r\n\r\n// Create an array of nodes, recursing into arrays and parsing strings if\r\n// necessary\r\nexports._makeDomArray = function makeDomArray(elem) {\r\n  if (elem == null) {\r\n    return [];\r\n  } else if (elem.cheerio) {\r\n    return elem.get();\r\n  } else if (Array.isArray(elem)) {\r\n    return _.flatten(elem.map(makeDomArray, this));\r\n  } else if (typeof elem === 'string') {\r\n    return evaluate(elem, this.options);\r\n  } else {\r\n    return [elem];\r\n  }\r\n};\r\n\r\nvar _insert = function(concatenator) {\r\n  return function() {\r\n    var self = this,\r\n        elems = slice.call(arguments),\r\n        dom = this._makeDomArray(elems);\r\n\r\n    if (typeof elems[0] === 'function') {\r\n      return domEach(this, function(i, el) {\r\n        dom = self._makeDomArray(elems[0].call(el, i, $.html(el.children)));\r\n        concatenator(dom, el.children, el);\r\n      });\r\n    } else {\r\n      return domEach(this, function(i, el) {\r\n        concatenator(dom, el.children, el);\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\n/*\r\n * Modify an array in-place, removing some number of elements and adding new\r\n * elements directly following them.\r\n *\r\n * @param {Array} array Target array to splice.\r\n * @param {Number} spliceIdx Index at which to begin changing the array.\r\n * @param {Number} spliceCount Number of elements to remove from the array.\r\n * @param {Array} newElems Elements to insert into the array.\r\n *\r\n * @api private\r\n */\r\nvar uniqueSplice = function(array, spliceIdx, spliceCount, newElems, parent) {\r\n  var spliceArgs = [spliceIdx, spliceCount].concat(newElems),\r\n      prev = array[spliceIdx - 1] || null,\r\n      next = array[spliceIdx] || null;\r\n  var idx, len, prevIdx, node, oldParent;\r\n\r\n  // Before splicing in new elements, ensure they do not already appear in the\r\n  // current array.\r\n  for (idx = 0, len = newElems.length; idx < len; ++idx) {\r\n    node = newElems[idx];\r\n    oldParent = node.parent || node.root;\r\n    prevIdx = oldParent && oldParent.children.indexOf(newElems[idx]);\r\n\r\n    if (oldParent && prevIdx > -1) {\r\n      oldParent.children.splice(prevIdx, 1);\r\n      if (parent === oldParent && spliceIdx > prevIdx) {\r\n        spliceArgs[0]--;\r\n      }\r\n    }\r\n\r\n    node.root = null;\r\n    node.parent = parent;\r\n\r\n    if (node.prev) {\r\n      node.prev.next = node.next || null;\r\n    }\r\n\r\n    if (node.next) {\r\n      node.next.prev = node.prev || null;\r\n    }\r\n\r\n    node.prev = newElems[idx - 1] || prev;\r\n    node.next = newElems[idx + 1] || next;\r\n  }\r\n\r\n  if (prev) {\r\n    prev.next = newElems[0];\r\n  }\r\n  if (next) {\r\n    next.prev = newElems[newElems.length - 1];\r\n  }\r\n\r\n  return array.splice.apply(array, spliceArgs);\r\n};\r\n\r\nexports.append = _insert(function(dom, children, parent) {\r\n  uniqueSplice(children, children.length, 0, dom, parent);\r\n});\r\n\r\nexports.prepend = _insert(function(dom, children, parent) {\r\n  uniqueSplice(children, 0, 0, dom, parent);\r\n});\r\n\r\nexports.after = function() {\r\n  var elems = slice.call(arguments),\r\n      dom = this._makeDomArray(elems),\r\n      self = this;\r\n\r\n  domEach(this, function(i, el) {\r\n    var parent = el.parent || el.root;\r\n    if (!parent) {\r\n      return;\r\n    }\r\n\r\n    var siblings = parent.children,\r\n        index = siblings.indexOf(el);\r\n\r\n    // If not found, move on\r\n    if (!~index) return;\r\n\r\n    if (typeof elems[0] === 'function') {\r\n      dom = self._makeDomArray(elems[0].call(el, i));\r\n    }\r\n\r\n    // Add element after `this` element\r\n    uniqueSplice(siblings, ++index, 0, dom, parent);\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\nexports.before = function() {\r\n  var elems = slice.call(arguments),\r\n      dom = this._makeDomArray(elems),\r\n      self = this;\r\n\r\n  domEach(this, function(i, el) {\r\n    var parent = el.parent || el.root;\r\n    if (!parent) {\r\n      return;\r\n    }\r\n\r\n    var siblings = parent.children,\r\n        index = siblings.indexOf(el);\r\n\r\n    // If not found, move on\r\n    if (!~index) return;\r\n\r\n    if (typeof elems[0] === 'function') {\r\n      dom = self._makeDomArray(elems[0].call(el, i));\r\n    }\r\n\r\n    // Add element before `el` element\r\n    uniqueSplice(siblings, index, 0, dom, parent);\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/*\r\n  remove([selector])\r\n*/\r\nexports.remove = function(selector) {\r\n  var elems = this;\r\n\r\n  // Filter if we have selector\r\n  if (selector)\r\n    elems = elems.filter(selector);\r\n\r\n  domEach(elems, function(i, el) {\r\n    var parent = el.parent || el.root;\r\n    if (!parent) {\r\n      return;\r\n    }\r\n\r\n    var siblings = parent.children,\r\n        index = siblings.indexOf(el);\r\n\r\n    if (!~index) return;\r\n\r\n\r\n    siblings.splice(index, 1);\r\n    if (el.prev) {\r\n      el.prev.next = el.next;\r\n    }\r\n    if (el.next) {\r\n      el.next.prev = el.prev;\r\n    }\r\n    el.prev = el.next = el.parent = el.root = null;\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\nexports.replaceWith = function(content) {\r\n  var self = this;\r\n\r\n  domEach(this, function(i, el) {\r\n    var parent = el.parent || el.root;\r\n    if (!parent) {\r\n      return;\r\n    }\r\n\r\n    var siblings = parent.children,\r\n        dom = self._makeDomArray(typeof content === 'function' ? content.call(el, i, el) : content),\r\n        index;\r\n\r\n    // In the case that `dom` contains nodes that already exist in other\r\n    // structures, ensure those nodes are properly removed.\r\n    updateDOM(dom, null);\r\n\r\n    index = siblings.indexOf(el);\r\n\r\n    // Completely remove old element\r\n    uniqueSplice(siblings, index, 1, dom, parent);\r\n    el.parent = el.prev = el.next = el.root = null;\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\nexports.empty = function() {\r\n  domEach(this, function(i, el) {\r\n    _.each(el.children, function(el) {\r\n      el.next = el.prev = el.parent = null;\r\n    });\r\n\r\n    el.children.length = 0;\r\n  });\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set/Get the HTML\r\n */\r\nexports.html = function(str) {\r\n  if (str === undefined) {\r\n    if (!this[0] || !this[0].children) return null;\r\n    return $.html(this[0].children, this.options);\r\n  }\r\n\r\n  var opts = this.options;\r\n\r\n  domEach(this, function(i, el) {\r\n    _.each(el.children, function(el) {\r\n      el.next = el.prev = el.parent = null;\r\n    });\r\n\r\n    var content = str.cheerio ? str.clone().get() : evaluate(str, opts);\r\n\r\n    updateDOM(content, el);\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\nexports.toString = function() {\r\n  return $.html(this);\r\n};\r\n\r\nexports.text = function(str) {\r\n  // If `str` is undefined, act as a \"getter\"\r\n  if (str === undefined) {\r\n    return $.text(this);\r\n  } else if (typeof str === 'function') {\r\n    // Function support\r\n    return domEach(this, function(i, el) {\r\n      var $el = [el];\r\n      return exports.text.call($el, str.call(el, i, $.text($el)));\r\n    });\r\n  }\r\n\r\n  // Append text node to each selected elements\r\n  domEach(this, function(i, el) {\r\n    _.each(el.children, function(el) {\r\n      el.next = el.prev = el.parent = null;\r\n    });\r\n\r\n    var elem = {\r\n      data: str,\r\n      type: 'text',\r\n      parent: el,\r\n      prev: null,\r\n      next: null,\r\n      children: []\r\n    };\r\n\r\n    updateDOM(elem, el);\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\nexports.clone = function() {\r\n  // Turn it into HTML, then recreate it,\r\n  // Seems to be the easiest way to reconnect everything correctly\r\n  return this._make($.html(this, this.options));\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-whacko/node_modules/whacko/lib/static.js":"/**\r\n * Module dependencies\r\n */\r\n\r\nvar select = require('css-select'),\r\n    parse = require('./parse'),\r\n    render = require('./render'),\r\n    _ = require('lodash');\r\n\r\n/**\r\n * $.load(str)\r\n */\r\n\r\nexports.load = function (content, options, isFragment) {\r\n    var Cheerio = require('./cheerio');\r\n\r\n    options = _.defaults(options || {}, Cheerio.prototype.options);\r\n\r\n    var root = parse(content, options, !isFragment);\r\n\r\n    var initialize = function (selector, context, r, opts) {\r\n        opts = _.defaults(opts || {}, options);\r\n        return Cheerio.call(this, selector, context, r || root, opts);\r\n    };\r\n\r\n    // Ensure that selections created by the \"loaded\" `initialize` function are\r\n    // true Cheerio instances.\r\n    initialize.prototype = Cheerio.prototype;\r\n\r\n    // Add in the static methods\r\n    _.merge(initialize, exports);\r\n\r\n    // Add in the root\r\n    initialize._root = root;\r\n    // store options\r\n    initialize._options = options;\r\n\r\n    return initialize;\r\n};\r\n\r\n/**\r\n * $.html([selector | dom])\r\n */\r\n\r\nexports.html = function (dom, options) {\r\n    var Cheerio = require('./cheerio');\r\n\r\n    // be flexible about parameters, sometimes we call html(),\r\n    // with options as only parameter\r\n    // check dom argument for dom element specific properties\r\n    // assume there is no 'length' or 'type' properties in the options object\r\n    if (Object.prototype.toString.call(dom) === '[object Object]' && !options && !('length' in dom) &&\r\n        !('type' in dom)) {\r\n        options = dom;\r\n        dom = undefined;\r\n    }\r\n\r\n    // sometimes $.html() used without preloading html\r\n    // so fallback non existing options to the default ones\r\n    options = _.defaults(options || {}, this._options, Cheerio.prototype.options);\r\n\r\n    if (dom) {\r\n        dom = (typeof dom === 'string') ? select(dom, this._root, options) : dom;\r\n        return render(dom, options);\r\n    } else if (this._root && this._root.children) {\r\n        return render(this._root.children, options);\r\n    } else {\r\n        return '';\r\n    }\r\n};\r\n\r\n/**\r\n * $.xml([selector | dom])\r\n */\r\n\r\nexports.xml = function (dom) {\r\n    if (dom) {\r\n        dom = (typeof dom === 'string') ? select(dom, this._root, this.options) : dom;\r\n        return render(dom, { xmlMode: true });\r\n    } else if (this._root && this._root.children) {\r\n        return render(this._root.children, { xmlMode: true });\r\n    } else {\r\n        return '';\r\n    }\r\n};\r\n\r\n/**\r\n * $.text(dom)\r\n */\r\n\r\nexports.text = function (elems) {\r\n    if (!elems) return '';\r\n\r\n    var ret = '',\r\n        len = elems.length,\r\n        elem;\r\n\r\n    for (var i = 0; i < len; i++) {\r\n        elem = elems[i];\r\n        if (elem.type === 'text') ret += elem.data;\r\n        else if (elem.children && elem.type !== 'comment') {\r\n            ret += exports.text(elem.children);\r\n        }\r\n    }\r\n\r\n    return ret;\r\n};\r\n\r\n/**\r\n * $.parseHTML(data [, context ] [, keepScripts ])\r\n * Parses a string into an array of DOM nodes. The `context` argument has no\r\n * meaning for Cheerio, but it is maintained for API compatibility with jQuery.\r\n */\r\nexports.parseHTML = function (data, context, keepScripts) {\r\n    var parsed;\r\n\r\n    if (!data || typeof data !== 'string') {\r\n        return null;\r\n    }\r\n\r\n    if (typeof context === 'boolean') {\r\n        keepScripts = context;\r\n    }\r\n\r\n    parsed = this.load(data, null, true);\r\n    if (!keepScripts) {\r\n        parsed('script').remove();\r\n    }\r\n\r\n    return parsed.root()[0].children;\r\n};\r\n\r\n/**\r\n * $.root()\r\n */\r\nexports.root = function () {\r\n    return this(this._root);\r\n};\r\n\r\n/**\r\n * $.contains()\r\n */\r\nexports.contains = function (container, contained) {\r\n\r\n    // According to the jQuery API, an element does not \"contain\" itself\r\n    if (contained === container) {\r\n        return false;\r\n    }\r\n\r\n    // Step up the descendants, stopping when the root element is reached\r\n    // (signaled by `.parent` returning a reference to the same object)\r\n    while (contained && contained !== contained.parent) {\r\n        contained = contained.parent;\r\n        if (contained === container) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-whacko/node_modules/whacko/lib/render.js":"/*\r\n Module dependencies\r\n */\r\nvar parse5 = require('parse5');\r\nvar _ = require('lodash');\r\nvar utils = require('./utils');\r\n\r\nvar encode = utils.encode;\r\n\r\n/*\r\n Boolean Attributes\r\n */\r\nvar rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;\r\n\r\n/*\r\n Format attributes\r\n */\r\nvar formatAttrs = function (attributes) {\r\n    if (!attributes) return;\r\n\r\n    var output = '',\r\n        value;\r\n\r\n    // Loop through the attributes\r\n    for (var key in attributes) {\r\n        value = attributes[key];\r\n        if (output) {\r\n            output += ' ';\r\n        }\r\n\r\n        if (!value && (rboolean.test(key) || key === '/')) {\r\n            output += key;\r\n        } else {\r\n            output += key + '=\"' + encode(value) + '\"';\r\n        }\r\n    }\r\n\r\n    return output;\r\n};\r\n\r\n/*\r\n Self-enclosing tags (stolen from node-htmlparser)\r\n */\r\nvar singleTag = {\r\n    area: 1,\r\n    base: 1,\r\n    basefont: 1,\r\n    br: 1,\r\n    col: 1,\r\n    frame: 1,\r\n    hr: 1,\r\n    img: 1,\r\n    input: 1,\r\n    isindex: 1,\r\n    link: 1,\r\n    meta: 1,\r\n    param: 1,\r\n    embed: 1,\r\n    include: 1,\r\n    'yield': 1\r\n};\r\n\r\n/*\r\n Tag types from htmlparser\r\n */\r\nvar tagType = {\r\n    tag: 1,\r\n    script: 1,\r\n    link: 1,\r\n    style: 1,\r\n    template: 1\r\n};\r\n\r\nvar render = module.exports = function (dom, opts) {\r\n    opts = opts || {};\r\n    var serializer = new parse5.TreeSerializer(parse5.TreeAdapters.htmlparser2, {\r\n        encodeHtmlEntities: opts.encodeEntities\r\n    });\r\n\r\n    if (!Array.isArray(dom) && !dom.cheerio)\r\n        dom = dom.type === 'root' ?  dom.children : [dom];\r\n\r\n    if (!opts.xmlMode) {\r\n        return serializer.serialize({\r\n            type: 'fake-root',\r\n            name: 'fake-root',\r\n            children: dom\r\n        });\r\n    }\r\n\r\n\r\n    var output = '',\r\n        xmlMode = opts.xmlMode;\r\n\r\n    _.each(dom, function (elem) {\r\n        var isTag = tagType[elem.type];\r\n\r\n        var pushVal;\r\n        if (isTag)\r\n            pushVal = renderTag(elem, xmlMode);\r\n        else if (elem.type === 'directive')\r\n            pushVal = renderDirective(elem);\r\n        else if (elem.type === 'comment')\r\n            pushVal = renderComment(elem);\r\n        else if (elem.type === 'cdata')\r\n            pushVal = renderCdata(elem);\r\n        else\r\n            pushVal = renderText(elem);\r\n\r\n        if (elem.children && elem.type !== 'cdata')\r\n            pushVal += render(elem.children, opts);\r\n\r\n        if (isTag && (!singleTag[elem.name] || xmlMode)) {\r\n            if (!isClosedTag(elem, xmlMode)) {\r\n                pushVal += '</' + elem.name + '>';\r\n            }\r\n        }\r\n\r\n        // Push rendered DOM node\r\n        output += pushVal;\r\n    });\r\n\r\n    return output;\r\n};\r\n\r\nvar isClosedTag = function (elem, xmlMode) {\r\n    return (xmlMode && (!elem.children || elem.children.length === 0));\r\n};\r\n\r\nvar renderTag = function (elem, xmlMode) {\r\n    var tag = '<' + elem.name,\r\n        attribs = formatAttrs(elem.attribs);\r\n\r\n    if (attribs) {\r\n        tag += ' ' + attribs;\r\n    }\r\n\r\n    if (isClosedTag(elem, xmlMode)) {\r\n        tag += '/';\r\n    }\r\n\r\n    return tag + '>';\r\n};\r\n\r\nvar renderDirective = function (elem) {\r\n    return '<' + elem.data + '>';\r\n};\r\n\r\nvar renderText = function (elem) {\r\n    return elem.data || '';\r\n};\r\n\r\nvar renderCdata = function (elem) {\r\n    return '<![CDATA[' + elem.children[0].data + ']]>';\r\n};\r\n\r\nvar renderComment = function (elem) {\r\n    return '<!--' + elem.data + '-->';\r\n};\r\n\r\n// module.exports = $.extend(exports);\r\n","/home/travis/build/npmtest/node-npmtest-whacko/node_modules/whacko/lib/api/css.js":"var _ = require('lodash'),\r\n    domEach = require('../utils').domEach;\r\nvar toString = Object.prototype.toString;\r\n\r\n/**\r\n * Set / Get css.\r\n *\r\n * @param {String|Object} prop\r\n * @param {String} val\r\n * @return {self}\r\n * @api public\r\n */\r\n\r\nexports.css = function(prop, val) {\r\n  if (arguments.length === 2 ||\r\n    // When `prop` is a \"plain\" object\r\n    (toString.call(prop) === '[object Object]')) {\r\n    return domEach(this, function(idx, el) {\r\n      setCss(el, prop, val, idx);\r\n    });\r\n  } else {\r\n    return getCss(this[0], prop);\r\n  }\r\n};\r\n\r\n/**\r\n * Set styles of all elements.\r\n *\r\n * @param {String|Object} prop\r\n * @param {String} val\r\n * @param {Number} idx - optional index within the selection\r\n * @return {self}\r\n * @api private\r\n */\r\n\r\nfunction setCss(el, prop, val, idx) {\r\n  if ('string' == typeof prop) {\r\n    var styles = getCss(el);\r\n    if (typeof val === 'function') {\r\n      val = val.call(el, idx, el);\r\n    }\r\n\r\n    if (val === '') {\r\n      delete styles[prop];\r\n    } else if (val != null) {\r\n      styles[prop] = val;\r\n    }\r\n\r\n    el.attribs.style = stringify(styles);\r\n  } else if ('object' == typeof prop) {\r\n    Object.keys(prop).forEach(function(k){\r\n      setCss(el, k, prop[k]);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Get parsed styles of the first element.\r\n *\r\n * @param {String} prop\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction getCss(el, prop) {\r\n  var styles = parse(el.attribs.style);\r\n  if (typeof prop === 'string') {\r\n    return styles[prop];\r\n  } else if (Array.isArray(prop)) {\r\n    return _.pick(styles, prop);\r\n  } else {\r\n    return styles;\r\n  }\r\n}\r\n\r\n/**\r\n * Stringify `obj` to styles.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction stringify(obj) {\r\n  return Object.keys(obj || {})\r\n    .reduce(function(str, prop){\r\n      return str += ''\r\n        + (str ? ' ' : '')\r\n        + prop\r\n        + ': '\r\n        + obj[prop]\r\n        + ';';\r\n    }, '');\r\n}\r\n\r\n/**\r\n * Parse `styles`.\r\n *\r\n * @param {String} styles\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction parse(styles) {\r\n  styles = (styles || '').trim();\r\n\r\n  if (!styles) return {};\r\n\r\n  return styles\r\n    .split(';')\r\n    .reduce(function(obj, str){\r\n      var n = str.indexOf(':');\r\n      // skip if there is no :, or if it is the first/last character\r\n      if (n < 1 || n === str.length-1) return obj;\r\n      obj[str.slice(0,n).trim()] = str.slice(n+1).trim();\r\n      return obj;\r\n    }, {});\r\n}\r\n"}